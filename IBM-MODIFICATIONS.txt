Don't Call pauseTimers() in startActivityForResult()
- Cordova RTC work item number: 94380
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-7947
(modified a little)
- Markmail or Google Group reference:
- Product PMR: APAR PI52650 (RTC 94380)
- Full description: Calling pauseTimers() in startActivityForResult() 
causes major issues to the webview on page load. The page hangs waiting
to resume, so no JavaScript or anything else gets executed. The activity's
onPause is already fired, so no need to call pauseTimers from 
startActivityForResult.

Fix Splashscreen Integer Value
- Cordova RTC work item number: 85275
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-3819 
and parts of commit 705991e5b037743e632934b3c6ee98976e18d3f8
- Markmail or Google Group reference:
- Product PMR: APAR PI46986 (RTC 85275)
- Full description: Documenation for setting a splashscreen through the 
config.xml using the <preference> tag with attributes name and value shows 
that name should be "SplashScreen" and value should be the name of the png 
file. The code to handle this expects value to be an integer instead. The 
fix is to check for string instead of integer. 

Fix Filereader returning FileNotFoundException
- Cordova RTC work item number: 81748
- Apache Cordova Jira issue: 
- Markmail or Google Group reference:
- Product PMR: APAR PI44703 (RTC 80983)
- Full description: Using the native filereader, the user is not able to display an 
image after selecting an image. The filereader returns an error FileNotFoundException. 
This started happening after a cherry-pick for refactoring the whitelist to make it
more restrictive (commit 910203776393bea65fd26ba1437c41898a641ccf). After some 
investigation, it was discovered that the Filereader returns a blob object, rather
than a file, and with the newly restrictive whitelist, blobs were not allowed. To 
fix, must specify that blobs are allowed in the whitelist. This does not happen on 
later versions of cordova. 

Security Vulnerability Patch for Exploiting Intents

- Cordova RTC work item number: 75631
- Apache Cordova Jira issue: 
- Markmail / Google Group / StackOverflow reference:
- IBM PMR: 9X999,999,000
- Worklight RTC work item number: (APAR) 75615
- CVE-2015-1835: Remote exploit of secondary configuration variables in Apache Cordova on Android
- Full description: Unwanted users are able to use intents to start an application 
and modify the config.xml with preferences that the developer did not specify. The 
intent injects the preference tag with a name and value into the config.xml so the 
unwanted user is able to start and exploit the application remotely. The vulnerability 
is limited to injecting the preference tag, but it is still exploiting the application 
nonetheless. The fix for this is to remove the intent functionality. No one will be 
able to use intents to start their app or inject preferences. 

Fix JSONStore.init() hangs for Android devices
- Cordova RTC work item number: 59273
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-6047, https://issues.apache.org/jira/browse/CB-6761, https://issues.apache.org/jira/browse/CB-7261
- Markmail or Google Group reference:
- Product PMR: APAR PI31084 (RTC 59375)
- Description: JSONStore.init() hangs is caused by a lack of good handling on the reset and toggling events
on NativeToJsMessageQueue.java class, the changes applied on this fix are going to properly handle the Online events,
handling the queue of messages on page transitions, and general optimization. More information on RTC work item.
Same fix has been applied to Cordova 3.1.0esr.

Fix App crash after switching device language for API 17 and below
- Cordova RTC work item number: 43844
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-7371, related --> https://issues.apache.org/jira/browse/CB-7291
- Markmail or Google Group reference: n/a
- Product APAR: 54944
- Worklight RTC work item number: 43636
- Description: The previous patch fixed the problem on API 19 Android 4.4.2 KitKat, although the problem
persist over Android 4.2.2 Jelly Bean and below.
This the patch taken from 6e222c3938db43fc00f3d6f8fbb138af075c689b(https://github.com/apache/cordova-android/commit/6e222c3938db43fc00f3d6f8fbb138af075c689b)
fixes the problem by all means, and for all versions. The previous patch doesn't have to be removed.
This fix, generates an internal whitelist entry when access="*", instead of whitelist=null.
Creates internal whitelist entries for: http://*/ and https://*/.
So the unlimited access it becomes into unlimited access for http & https protocol only. 
Using that approach we can avoid a null object in whiteList and "about:blank" can't be loaded on loadURL method.

Fix leaked window, when hitting back button while alert being rendered

- Cordova RTC work item number: 43292
- Apache Cordova Jira issue:  https://issues.apache.org/jira/browse/CB-6837
- Markmail or Google Group reference: n/a
- Product PMR: n/a
- Worklight RTC work item number: 42684
- Cherry-pick: 890e12c30674d7b4dff54082e9ee879505475e19
- Description: When hitting the back button while alert dialog is being rendered causes a leaked window,
when resuming the app by clicking on its icon using the home screen or using the Multitask button, 
the webview doesn't render completely, it shows a blackscreen. 

This is get fixed by keeping track of the last AlertDialog showed.
The last dialog showed that is rendered while hitting back button it causes a leaked window, 
so during onDestroy event, the webview will only destroy the last one showed, avoiding 
the exception and fixing the problem.

Fix App crash after switching device language

- Cordova RTC work item number: 43844
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-7371
- Markmail or Google Group reference: n/a
- Product PMR: n/a
- Worklight RTC work item number: 43636
- Cherry-pick: a5c8472a374c1c2b2026fa9dbb39235e198768ef, af440460e10da89caa167ecb5c266f3857493f90
- Description: After switching device language on android, the android application was crashing.
The main reason of this behavior is the config.xml origin="*" tag, this specifies access to 
all kind of resources on the network and makes the whiteList object on the WhiteList class a null object, 
indicating that when origin="*", there's no whiteList, all is allowed. There's a condition, right before
loadUrl(), that it checks the whitelist, and if null, this condition passes and triggers a load of about:blank.
Applying those cherry picks, those kind of load("about:blank") will be stopped, if the view is currently
loading a URL,ignoring multiple onPageFinished() callbacks & onReceivedError using stopLoading().

Apply security fixes for cordova-android vulnerabilities

- RTC work item number: 45720
- Apache Cordova Jira issue: 
- Markmail or Google Group reference:
- Product PMR:
- Description: Severe remote exploitation vulnerabilities were discovered in 
Cordova-android. These were filed as CVE-2014-3500 (Cross-application scripting
via Android intent URLs), CVE-2014-3501 (Cordova whitelist bypass for non-http URLs)
and CVE-2014-3502 (Cordova apps can potentially leak data to other apps via android intent URLs.)
The fixes included getting errorURL and startURL only from the Config class and never from
intent extras, editing the whitelist logic, and creating a new "internal" whitelist for
intent URLs that should be allowed (geo:, sms:, etc.)

Backport content:// URI fix to 3.4 so StorageAccessFramework will work
RTC: 43945 - In Android 4.4 no videos in the gallery are available at all

- RTC work item number: 43945
- Apache Cordova Jira issue: https://issues.apache.org/jira/browse/CB-5398
- Markmail or Google Group reference:
- Product PMR: APAR: 42806
- Description: Revert the workaround for image picker problem with content:// URI's.
Remove the workaround from cordova-plugin-camera, and cherry-pick commits into 
cordova-android that apply the content URI fix to all URIs, which means the 
StorageAccessFramework will work correctly with the camera plugin. This was 
previously done for Cordova 3.1esr.